1. Complete memory mapping
  1.1. OAM (Object Attribute Memory)
  1.2. I/O Registers
    1.2.1. Joypad
    1.2.2. Serial transfer
    1.2.3. Timer/divider Registers
    1.2.4. Interrupts
    1.2.5. CGB Registers
    1.2.6. Infrared (TBD)
    1.2.7. Super Gameboy (TBD)
  1.3. 
2. Implement graphics (tiles, palettes etc.)

TODOs:

GUI for debug information
Logging to file

Executing instruction = CP n, operand = 0x91

Registers
A: 0x31 B: 0x00 C: 0x13 D: 0x00
E: 0xD8 F: 0x50 H: 0x01 L: 0x4D
Flags: Z: 0 N: 1 H: 0 C: 1
PC: 0x6F SP: 0xFFFC
Total cycles (ticks): 360

Should be
A: 0 B: 0 C: 0x13 D: 0
E: D8 F: 80 H: 1 L: 4D
PC: 6D SP: FFFC

Flags: Z: 1 N: 0 H: 0 C: 0

Notes:

PC = 0x6B
Problem instruction is LD A, (FF00+$44)
Loads value 0x31 into A, should be 0
Address 0xFF44 is an I/O port, mapping to the LCD (LCD Y Coordinate) (see https://gbdev.io/pandocs/STAT.html#ff41--stat-lcd-status)

LCD Y indicates the current horizontal line. Values are between 0 and 153, with 144 to 153 being VBlank period
Basically the GPU line variable needs to be mapped to the memory address 0xFF44

Might need to separate IO and LCD into separate source files
